import 'package:dartz/dartz.dart';
import 'package:fahem/core/error/failure.dart';
import 'package:fahem/data/models/chat/suggested_message_model.dart';
import 'package:fahem/data/models/jobs/employment_applications/employment_application_model.dart';
import 'package:fahem/data/models/transactions/instant_consultations_comments/instant_consultation_comment_model.dart';
import 'package:fahem/data/models/jobs/jobs/job_model.dart';
import 'package:fahem/data/models/lawyers/lawyers/lawyer_model.dart';
import 'package:fahem/data/models/lawyers/lawyers_features/lawyer_feature_model.dart';
import 'package:fahem/data/models/lawyers/lawyers_reviews/lawyer_review_model.dart';
import 'package:fahem/data/models/lawyers/lawyers_categories/lawyer_category_model.dart';
import 'package:fahem/data/models/legal_accountants/legal_accountants/legal_accountant_model.dart';
import 'package:fahem/data/models/legal_accountants/legal_accountants_features/legal_accountant_feature_model.dart';
import 'package:fahem/data/models/legal_accountants/legal_accountants_reviews/legal_accountant_review_model.dart';
import 'package:fahem/data/models/users/logs/log_model.dart';
import 'package:fahem/data/models/public_relations/public_relations_features/public_relation_feature_model.dart';
import 'package:fahem/data/models/settings/settings_model.dart';
import 'package:fahem/data/models/sliders/slider_model.dart';
import 'package:fahem/data/models/users/users_accounts/user_account_model.dart';
import 'package:fahem/data/models/public_relations/public_relations/public_relation_model.dart';
import 'package:fahem/data/models/public_relations/public_relations_reviews/public_relation_review_model.dart';
import 'package:fahem/data/models/public_relations/public_relations_categories/public_relation_category_model.dart';
import 'package:fahem/data/models/playlists/playlist_comments/playlist_comment_model.dart';
import 'package:fahem/data/models/playlists/playlists/playlist_model.dart';
import 'package:fahem/data/models/version/version_model.dart';
import 'package:fahem/data/models/transactions/transactions/transaction_model.dart';
import 'package:fahem/data/models/packages/package_model.dart';
import 'package:fahem/data/models/users/wallet/wallet_model.dart';
import 'package:fahem/domain/usecases/chat/add_chat_usecase.dart';
import 'package:fahem/domain/usecases/chat/add_message_usecase.dart';
import 'package:fahem/domain/usecases/chat/update_message_mode_usecase.dart';
import 'package:fahem/domain/usecases/jobs/employment_applications/insert_employment_application_usecase.dart';
import 'package:fahem/domain/usecases/lawyers/lawyers_reviews/insert_lawyer_review_usecase.dart';
import 'package:fahem/domain/usecases/legal_accountants/legal_accountants_reviews/insert_legal_accountant_review_usecase.dart';
import 'package:fahem/domain/usecases/users/logs/delete_log_usecase.dart';
import 'package:fahem/domain/usecases/users/logs/get_logs_for_user_usecase.dart';
import 'package:fahem/domain/usecases/users/logs/insert_log_usecase.dart';
import 'package:fahem/domain/usecases/playlists/playlist_comments/delete_playlist_comment_usecase.dart';
import 'package:fahem/domain/usecases/playlists/playlist_comments/edit_playlist_comment_usecase.dart';
import 'package:fahem/domain/usecases/playlists/playlist_comments/insert_playlist_comment_usecase.dart';
import 'package:fahem/domain/usecases/public_relations/public_relations_reviews/insert_public_relation_review_usecase.dart';
import 'package:fahem/domain/usecases/shared/upload_file_usecase.dart';
import 'package:fahem/domain/usecases/transactions/transactions/delete_transaction_usecase.dart';
import 'package:fahem/domain/usecases/transactions/transactions/toggle_is_done_instant_consultation_usecase.dart';
import 'package:fahem/domain/usecases/transactions/transactions/get_transactions_for_user_usecase.dart';
import 'package:fahem/domain/usecases/transactions/transactions/insert_transaction_usecase.dart';
import 'package:fahem/domain/usecases/transactions/transactions/toggle_is_viewed_usecase.dart';
import 'package:fahem/domain/usecases/users/users_accounts/check_and_get_user_account_usecase.dart';
import 'package:fahem/domain/usecases/users/users_accounts/delete_user_account_usecase.dart';
import 'package:fahem/domain/usecases/users/users_accounts/edit_user_account_usecase.dart';
import 'package:fahem/domain/usecases/users/users_accounts/insert_user_account_usecase.dart';
import 'package:fahem/domain/usecases/users/users_accounts/is_user_account_exist_usecase.dart';
import 'package:fahem/domain/usecases/users/wallet/edit_wallet_usecase.dart';
import 'package:fahem/domain/usecases/users/wallet/get_wallet_for_user_usecase.dart';
import 'package:fahem/domain/usecases/users/wallet/insert_wallet_usecase.dart';
import 'package:fahem/domain/usecases/users/wallet/is_user_have_wallet_usecase.dart';

abstract class BaseRepository {
  Future<Either<Failure, VersionModel>> getVersion();
  Future<Either<Failure, EmploymentApplicationModel>> insertEmploymentApplication(InsertEmploymentApplicationParameters parameters);
  Future<Either<Failure, List<JobModel>>> getAvailableJobs();
  Future<Either<Failure, List<LawyerModel>>> getAllLawyers();
  Future<Either<Failure, List<LawyerCategoryModel>>> getAllLawyersCategories();
  Future<Either<Failure, List<LawyerReviewModel>>> getAllLawyersReviews();
  Future<Either<Failure, LawyerReviewModel>> insertLawyerReview(InsertLawyerReviewParameters parameters);
  Future<Either<Failure, List<LawyerFeatureModel>>> getAllLawyersFeatures();
  Future<Either<Failure, List<LogModel>>> getLogsForUser(GetLogsForUserParameters parameters);
  Future<Either<Failure, LogModel>> insertLog(InsertLogParameters parameters);
  Future<Either<Failure, void>> deleteLog(DeleteLogParameters parameters);
  Future<Either<Failure, List<PackageModel>>> getAllPackages();
  Future<Either<Failure, List<PlaylistModel>>> getAllPlaylists();
  Future<Either<Failure, PlaylistCommentModel>> insertPlaylistComment(InsertPlaylistCommentParameters parameters);
  Future<Either<Failure, PlaylistCommentModel>> editPlaylistComment(EditPlaylistCommentParameters parameters);
  Future<Either<Failure, void>> deletePlaylistComment(DeletePlaylistCommentParameters parameters);
  Future<Either<Failure, List<PublicRelationModel>>> getAllPublicRelations();
  Future<Either<Failure, List<PublicRelationCategoryModel>>> getAllPublicRelationsCategories();
  Future<Either<Failure, List<PublicRelationReviewModel>>> getAllPublicRelationsReviews();
  Future<Either<Failure, PublicRelationReviewModel>> insertPublicRelationReview(InsertPublicRelationReviewParameters parameters);
  Future<Either<Failure, List<PublicRelationFeatureModel>>> getAllPublicRelationsFeatures();
  Future<Either<Failure, List<LegalAccountantModel>>> getAllLegalAccountants();
  Future<Either<Failure, List<SliderModel>>> getAllSliders();
  Future<Either<Failure, List<LegalAccountantReviewModel>>> getAllLegalAccountantsReviews();
  Future<Either<Failure, LegalAccountantReviewModel>> insertLegalAccountantReview(InsertLegalAccountantReviewParameters parameters);
  Future<Either<Failure, List<LegalAccountantFeatureModel>>> getAllLegalAccountantsFeatures();
  Future<Either<Failure, List<TransactionModel>>> getTransactionsForUser(GetTransactionsForUserParameters parameters);
  Future<Either<Failure, TransactionModel>> insertTransaction(InsertTransactionParameters parameters);
  Future<Either<Failure, void>> deleteTransaction(DeleteTransactionParameters parameters);
  Future<Either<Failure, List<InstantConsultationCommentModel>>> getAllInstantConsultationsComments();
  Future<Either<Failure, TransactionModel>> toggleIsDoneInstantConsultation(ToggleIsDoneInstantConsultationParameters parameters);
  Future<Either<Failure, TransactionModel>> toggleIsViewed(ToggleIsViewedParameters parameters);
  Future<Either<Failure, UserAccountModel?>> checkAndGetUserAccount(CheckAndGetUserAccountParameters parameters);
  Future<Either<Failure, bool>> isUserAccountExist(IsUserAccountExistParameters parameters);
  Future<Either<Failure, UserAccountModel>> insertUserAccount(InsertUserAccountParameters parameters);
  Future<Either<Failure, UserAccountModel>> editUserAccount(EditUserAccountParameters parameters);
  Future<Either<Failure, void>> deleteUserAccount(DeleteUserAccountParameters parameters);
  Future<Either<Failure, bool>> isUserHaveWallet(IsUserHaveWalletParameters parameters);
  Future<Either<Failure, WalletModel?>> getWalletForUser(GetWalletParameters parameters);
  Future<Either<Failure, WalletModel>> insertWallet(InsertWalletParameters parameters);
  Future<Either<Failure, WalletModel>> editWallet(EditWalletParameters parameters);
  Future<Either<Failure, SettingsModel>> getSettings();
  Future<Either<Failure, String>> uploadFile(UploadFileParameters parameters);

  // Firebase
  Future<Either<Failure, List<SuggestedMessageModel>>> getSuggestedMessages();
  Future<Either<Failure, void>> addChat(AddChatParameters parameters);
  Future<Either<Failure, void>> addMessage(AddMessageParameters parameters);
  Future<Either<Failure, void>> updateMessageMode(UpdateMessageModeParameters parameters);
}